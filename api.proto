syntax = "proto3";
package pb;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host : "127.0.0.1:8888"
  info : {title : "c2-api";};

  schemes : HTTPS;
  consumes : "application/json";
  produces : "application/json";
};

service C2 {
  // Create a new client
  rpc NewClient(NewClientRequest) returns (NewClientResponse) {
    option (google.api.http) = {
      post : "/e4/client/{client.name}"
      body : "*"
    };
  }
  // Remove a client
  rpc RemoveClient(RemoveClientRequest) returns (RemoveClientResponse) {
    option (google.api.http) = {
      delete : "/e4/client/{client.name}"
    };
  }
  // Instruct the C2 server to send a reset command to the client
  rpc ResetClient(ResetClientRequest) returns (ResetClientResponse) {
    option (google.api.http) = {
      put : "/e4/client/{client.name}"
    };
  }
  // Generate a new key for the client
  rpc NewClientKey(NewClientKeyRequest) returns (NewClientKeyResponse) {
    option (google.api.http) = {
      patch : "/e4/client/{client.name}"
      body : "*"
    };
  }
  // Create a new topic
  rpc NewTopic(NewTopicRequest) returns (NewTopicResponse) {
    option (google.api.http) = {
      post : "/e4/topic/{topic}"
    };
  }
  // Remove a topic
  rpc RemoveTopic(RemoveTopicRequest) returns (RemoveTopicResponse) {
    option (google.api.http) = {
      delete : "/e4/topic/{topic}"
    };
  }
  // Associate a topic with a client
  rpc NewTopicClient(NewTopicClientRequest) returns (NewTopicClientResponse) {
    option (google.api.http) = {
      put : "/e4/client/{client.name}/topic/{topic}"
    };
  }
  // Remove a topic / client association
  rpc RemoveTopicClient(RemoveTopicClientRequest) returns (RemoveTopicClientResponse) {
    option (google.api.http) = {
      delete : "/e4/client/{client.name}/topic/{topic}"
    };
  }
  // Count the number of topics for a client
  rpc CountTopicsForClient(CountTopicsForClientRequest) returns (CountTopicsForClientResponse) {
    option (google.api.http) = {
      get : "/e4/client/{client.name}/topics/count"
    };
  }
  // Retrieve paginated topics for a client
  rpc GetTopicsForClient(GetTopicsForClientRequest) returns (GetTopicsForClientResponse) {
    option (google.api.http) = {
      get : "/e4/client/{client.name}/topics"
    };
  }
  // Count the number of clients for a topic
  rpc CountClientsForTopic(CountClientsForTopicRequest) returns (CountClientsForTopicResponse) {
    option (google.api.http) = {
      get : "/e4/topic/{topic}/clients/count"
    };
  }
  // Retrieve paginated clients for a topic
  rpc GetClientsForTopic(GetClientsForTopicRequest) returns (GetClientsForTopicResponse) {
    option (google.api.http) = {
      get : "/e4/topic/{topic}/clients"
    };
  }
  // Count the number of clients
  rpc CountClients(CountClientsRequest) returns (CountClientsResponse) {
    option (google.api.http) = {
      get : "/e4/clients/count"
    };
  }
  // Retrieve paginated clients
  rpc GetClients(GetClientsRequest) returns (GetClientsResponse) {
    option (google.api.http) = {
      get : "/e4/clients"
    };
  }

  // Count the number of topics
  rpc CountTopics(CountTopicsRequest) returns (CountTopicsResponse) {
    option (google.api.http) = {
      get : "/e4/topics/count"
    };
  }
  // Retrieve paginated topics
  rpc GetTopics(GetTopicsRequest) returns (GetTopicsResponse) {
    option (google.api.http) = {
      get : "/e4/topics"
    };
  }
  // Send a message on a topic
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (google.api.http) = {
      post : "/e4/message"
      body : "*"
    };
  }

  // Provide a stream on C2 system events, grpc only
  rpc SubscribeToEventStream(SubscribeToEventStreamRequest) returns (stream Event) {}
}

message Client {
  string name = 1;
}

message NewClientRequest {
  Client client = 1;
  bytes key = 2;
}
message NewClientResponse {}

message RemoveClientRequest {
  Client client = 1;
}
message RemoveClientResponse {}

message NewTopicClientRequest {
  Client client = 1;
  string topic = 2;
}
message NewTopicClientResponse {}

message RemoveTopicClientRequest {
  Client client = 1;
  string topic = 2;
}
message RemoveTopicClientResponse {}

message ResetClientRequest {
  Client client = 1;
}
message ResetClientResponse {}

message NewTopicRequest {
  string topic = 1;
}
message NewTopicResponse {}

message RemoveTopicRequest {
  string topic = 1;
}
message RemoveTopicResponse {}

message NewClientKeyRequest {
  Client client = 1;
}
message NewClientKeyResponse {}

message CountTopicsForClientRequest {
  Client client = 1;
}
message CountTopicsForClientResponse {
  int64 count = 1;
}

message GetTopicsForClientRequest {
  Client client = 1;
  int64 offset = 2;
  int64 count = 3;
}
message GetTopicsForClientResponse {
  repeated string topics = 1;
}

message CountClientsForTopicRequest {
  string topic = 1;
}
message CountClientsForTopicResponse {
  int64 count = 1;
}

message GetClientsForTopicRequest {
  string topic = 1;
  int64 offset = 2;
  int64 count = 3;
}
message GetClientsForTopicResponse {
  repeated Client clients = 1;
}

message CountClientsRequest {}
message CountClientsResponse {
  int64 count = 1;
}

message GetClientsRequest {
  int64 offset = 1;
  int64 count = 2;
}
message GetClientsResponse {
  repeated Client clients = 1;
}

message CountTopicsRequest {}
message CountTopicsResponse {
  int64 count = 1;
}

message GetTopicsRequest {
  int64 offset = 1;
  int64 count = 2;
}
message GetTopicsResponse {
  repeated string topics = 1;
}

message SendMessageRequest {
  string topic = 1;
  string message = 2;
}
message SendMessageResponse {}

message SubscribeToEventStreamRequest {}

enum EventType {
  UNDEFINED = 0;
  CLIENT_SUBSCRIBED = 1;
  CLIENT_UNSUBSCRIBED = 2;
}

message Event {
  EventType type = 1;
  string source = 2;
  string target = 3;
  // Hold the time where event is sent
  google.protobuf.Timestamp timestamp = 4;
}
