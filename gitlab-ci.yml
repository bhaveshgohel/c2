# E4 C2 Backend gitlab ci file

image: golang:1.12

stages:
  - test
  - build
  - build-docker

before_script:
  # Packages
  - PACKAGES="openssh-client git bash"
  - command -v apt >/dev/null 2>&1 && (apt-get update && apt-get install -y ${PACKAGES}) || (apk update && apk add ${PACKAGES})

  # https://docs.gitlab.com/ee/ci/ssh_keys/
  - echo "Configuring git"
  - eval $(ssh-agent -s)
  - echo "$SSH_CI_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh && chmod 600 ~/.ssh
  - echo "gitlab.com,35.231.145.151 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=" >> ~/.ssh/known_hosts

  # Force use of ssh urls instead of https for gitlab.com. Has to be done before any go get...
  - git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"

build:
  stage: build
  cache:
    paths:
      - .cache
  script:
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - export PATH="${PATH}:${GOPATH}/bin"
    - ./scripts/build.sh
  artifacts:
    paths:
      - bin/*
    expire_in: 1 hr

build-docker:
  image: docker:stable
  stage: build-docker
  tags:
    - docker
  services:
    - docker:dind
  dependencies:
    - build
  script:
    - ./scripts/docker-build.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push registry.gitlab.com/teserakt/c2:${CI_COMMIT_REF_NAME//\//_}
    - docker push registry.gitlab.com/teserakt/c2:${CI_COMMIT_SHORT_SHA}

unittest:
  stage: test
  cache:
    paths:
      - .cache
  script:
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - export PATH="${PATH}:${GOPATH}/bin"
    - ./scripts/unittests.sh

functest:
  stage: test
  cache:
    paths:
      - .cache
  services:
    - name: erlio/docker-vernemq:latest
      alias: mqtt
  variables:
    DOCKER_VERNEMQ_ALLOW_ANONYMOUS: "on"
  script:
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - export PATH="${PATH}:${GOPATH}/bin"
    # TODO: do we want to allow starting a C2 with no config file, but only envs ?
    # Until then, we use sample one to get the loader happy, and override what we need in envs after.
    - cp configs/config.yaml.example configs/config.yaml
    # The runner probably run as root, thus it can write the logs to the hardcoded file...
    # We link it back to stdout as we want to see them in the build logs
    - ln -s /dev/stdout /var/log/e4_c2.log
    - openssl req  -nodes -newkey rsa:2048 -keyout configs/c2-key.pem -x509 -sha256 -days 365 -out configs/c2-cert.pem  -subj "/CN=localhost" -extensions san -config <(echo "[req]"; echo distinguished_name=req; echo "[san]"; echo subjectAltName=IP:127.0.0.1)
    - export C2TEST_MQTT="mqtt:1883"
    - ./scripts/test.sh
