// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2/internal/analytics (interfaces: MessageMonitor)

// Package analytics is a generated GoMock package.
package analytics

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessageMonitor is a mock of MessageMonitor interface
type MockMessageMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMonitorMockRecorder
}

// MockMessageMonitorMockRecorder is the mock recorder for MockMessageMonitor
type MockMessageMonitorMockRecorder struct {
	mock *MockMessageMonitor
}

// NewMockMessageMonitor creates a new mock instance
func NewMockMessageMonitor(ctrl *gomock.Controller) *MockMessageMonitor {
	mock := &MockMessageMonitor{ctrl: ctrl}
	mock.recorder = &MockMessageMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageMonitor) EXPECT() *MockMessageMonitorMockRecorder {
	return m.recorder
}

// Enabled mocks base method
func (m *MockMessageMonitor) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled
func (mr *MockMessageMonitorMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockMessageMonitor)(nil).Enabled))
}

// OnMessage mocks base method
func (m *MockMessageMonitor) OnMessage(arg0 context.Context, arg1 LoggedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnMessage", arg0, arg1)
}

// OnMessage indicates an expected call of OnMessage
func (mr *MockMessageMonitorMockRecorder) OnMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessage", reflect.TypeOf((*MockMessageMonitor)(nil).OnMessage), arg0, arg1)
}
