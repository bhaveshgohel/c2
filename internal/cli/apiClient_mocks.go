// Copyright 2020 Teserakt AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/c2/internal/cli (interfaces: APIClientFactory,C2Client)

// Package cli is a generated GoMock package.
package cli

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
	pb "github.com/teserakt-io/c2/pkg/pb"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAPIClientFactory is a mock of APIClientFactory interface
type MockAPIClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientFactoryMockRecorder
}

// MockAPIClientFactoryMockRecorder is the mock recorder for MockAPIClientFactory
type MockAPIClientFactoryMockRecorder struct {
	mock *MockAPIClientFactory
}

// NewMockAPIClientFactory creates a new mock instance
func NewMockAPIClientFactory(ctrl *gomock.Controller) *MockAPIClientFactory {
	mock := &MockAPIClientFactory{ctrl: ctrl}
	mock.recorder = &MockAPIClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIClientFactory) EXPECT() *MockAPIClientFactoryMockRecorder {
	return m.recorder
}

// NewClient mocks base method
func (m *MockAPIClientFactory) NewClient(arg0 *cobra.Command) (C2Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", arg0)
	ret0, _ := ret[0].(C2Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient
func (mr *MockAPIClientFactoryMockRecorder) NewClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockAPIClientFactory)(nil).NewClient), arg0)
}

// MockC2Client is a mock of C2Client interface
type MockC2Client struct {
	ctrl     *gomock.Controller
	recorder *MockC2ClientMockRecorder
}

// MockC2ClientMockRecorder is the mock recorder for MockC2Client
type MockC2ClientMockRecorder struct {
	mock *MockC2Client
}

// NewMockC2Client creates a new mock instance
func NewMockC2Client(ctrl *gomock.Controller) *MockC2Client {
	mock := &MockC2Client{ctrl: ctrl}
	mock.recorder = &MockC2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockC2Client) EXPECT() *MockC2ClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockC2Client) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockC2ClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockC2Client)(nil).Close))
}

// CountClients mocks base method
func (m *MockC2Client) CountClients(arg0 context.Context, arg1 *pb.CountClientsRequest, arg2 ...grpc.CallOption) (*pb.CountClientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountClients", varargs...)
	ret0, _ := ret[0].(*pb.CountClientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClients indicates an expected call of CountClients
func (mr *MockC2ClientMockRecorder) CountClients(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClients", reflect.TypeOf((*MockC2Client)(nil).CountClients), varargs...)
}

// CountClientsForTopic mocks base method
func (m *MockC2Client) CountClientsForTopic(arg0 context.Context, arg1 *pb.CountClientsForTopicRequest, arg2 ...grpc.CallOption) (*pb.CountClientsForTopicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountClientsForTopic", varargs...)
	ret0, _ := ret[0].(*pb.CountClientsForTopicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClientsForTopic indicates an expected call of CountClientsForTopic
func (mr *MockC2ClientMockRecorder) CountClientsForTopic(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClientsForTopic", reflect.TypeOf((*MockC2Client)(nil).CountClientsForTopic), varargs...)
}

// CountLinkedClients mocks base method
func (m *MockC2Client) CountLinkedClients(arg0 context.Context, arg1 *pb.CountLinkedClientsRequest, arg2 ...grpc.CallOption) (*pb.CountLinkedClientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountLinkedClients", varargs...)
	ret0, _ := ret[0].(*pb.CountLinkedClientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLinkedClients indicates an expected call of CountLinkedClients
func (mr *MockC2ClientMockRecorder) CountLinkedClients(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLinkedClients", reflect.TypeOf((*MockC2Client)(nil).CountLinkedClients), varargs...)
}

// CountTopics mocks base method
func (m *MockC2Client) CountTopics(arg0 context.Context, arg1 *pb.CountTopicsRequest, arg2 ...grpc.CallOption) (*pb.CountTopicsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountTopics", varargs...)
	ret0, _ := ret[0].(*pb.CountTopicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTopics indicates an expected call of CountTopics
func (mr *MockC2ClientMockRecorder) CountTopics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTopics", reflect.TypeOf((*MockC2Client)(nil).CountTopics), varargs...)
}

// CountTopicsForClient mocks base method
func (m *MockC2Client) CountTopicsForClient(arg0 context.Context, arg1 *pb.CountTopicsForClientRequest, arg2 ...grpc.CallOption) (*pb.CountTopicsForClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountTopicsForClient", varargs...)
	ret0, _ := ret[0].(*pb.CountTopicsForClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTopicsForClient indicates an expected call of CountTopicsForClient
func (mr *MockC2ClientMockRecorder) CountTopicsForClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTopicsForClient", reflect.TypeOf((*MockC2Client)(nil).CountTopicsForClient), varargs...)
}

// GetClients mocks base method
func (m *MockC2Client) GetClients(arg0 context.Context, arg1 *pb.GetClientsRequest, arg2 ...grpc.CallOption) (*pb.GetClientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClients", varargs...)
	ret0, _ := ret[0].(*pb.GetClientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients
func (mr *MockC2ClientMockRecorder) GetClients(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockC2Client)(nil).GetClients), varargs...)
}

// GetClientsForTopic mocks base method
func (m *MockC2Client) GetClientsForTopic(arg0 context.Context, arg1 *pb.GetClientsForTopicRequest, arg2 ...grpc.CallOption) (*pb.GetClientsForTopicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientsForTopic", varargs...)
	ret0, _ := ret[0].(*pb.GetClientsForTopicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsForTopic indicates an expected call of GetClientsForTopic
func (mr *MockC2ClientMockRecorder) GetClientsForTopic(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsForTopic", reflect.TypeOf((*MockC2Client)(nil).GetClientsForTopic), varargs...)
}

// GetCryptoMode mocks base method
func (m *MockC2Client) GetCryptoMode(arg0 context.Context, arg1 *pb.GetCryptoModeRequest, arg2 ...grpc.CallOption) (*pb.GetCryptoModeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCryptoMode", varargs...)
	ret0, _ := ret[0].(*pb.GetCryptoModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoMode indicates an expected call of GetCryptoMode
func (mr *MockC2ClientMockRecorder) GetCryptoMode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoMode", reflect.TypeOf((*MockC2Client)(nil).GetCryptoMode), varargs...)
}

// GetLinkedClients mocks base method
func (m *MockC2Client) GetLinkedClients(arg0 context.Context, arg1 *pb.GetLinkedClientsRequest, arg2 ...grpc.CallOption) (*pb.GetLinkedClientsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkedClients", varargs...)
	ret0, _ := ret[0].(*pb.GetLinkedClientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedClients indicates an expected call of GetLinkedClients
func (mr *MockC2ClientMockRecorder) GetLinkedClients(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedClients", reflect.TypeOf((*MockC2Client)(nil).GetLinkedClients), varargs...)
}

// GetTopics mocks base method
func (m *MockC2Client) GetTopics(arg0 context.Context, arg1 *pb.GetTopicsRequest, arg2 ...grpc.CallOption) (*pb.GetTopicsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopics", varargs...)
	ret0, _ := ret[0].(*pb.GetTopicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopics indicates an expected call of GetTopics
func (mr *MockC2ClientMockRecorder) GetTopics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopics", reflect.TypeOf((*MockC2Client)(nil).GetTopics), varargs...)
}

// GetTopicsForClient mocks base method
func (m *MockC2Client) GetTopicsForClient(arg0 context.Context, arg1 *pb.GetTopicsForClientRequest, arg2 ...grpc.CallOption) (*pb.GetTopicsForClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopicsForClient", varargs...)
	ret0, _ := ret[0].(*pb.GetTopicsForClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsForClient indicates an expected call of GetTopicsForClient
func (mr *MockC2ClientMockRecorder) GetTopicsForClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsForClient", reflect.TypeOf((*MockC2Client)(nil).GetTopicsForClient), varargs...)
}

// LinkClient mocks base method
func (m *MockC2Client) LinkClient(arg0 context.Context, arg1 *pb.LinkClientRequest, arg2 ...grpc.CallOption) (*pb.LinkClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LinkClient", varargs...)
	ret0, _ := ret[0].(*pb.LinkClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkClient indicates an expected call of LinkClient
func (mr *MockC2ClientMockRecorder) LinkClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkClient", reflect.TypeOf((*MockC2Client)(nil).LinkClient), varargs...)
}

// NewC2Key mocks base method
func (m *MockC2Client) NewC2Key(arg0 context.Context, arg1 *pb.NewC2KeyRequest, arg2 ...grpc.CallOption) (*pb.NewC2KeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewC2Key", varargs...)
	ret0, _ := ret[0].(*pb.NewC2KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewC2Key indicates an expected call of NewC2Key
func (mr *MockC2ClientMockRecorder) NewC2Key(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewC2Key", reflect.TypeOf((*MockC2Client)(nil).NewC2Key), varargs...)
}

// NewClient mocks base method
func (m *MockC2Client) NewClient(arg0 context.Context, arg1 *pb.NewClientRequest, arg2 ...grpc.CallOption) (*pb.NewClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewClient", varargs...)
	ret0, _ := ret[0].(*pb.NewClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient
func (mr *MockC2ClientMockRecorder) NewClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockC2Client)(nil).NewClient), varargs...)
}

// NewClientKey mocks base method
func (m *MockC2Client) NewClientKey(arg0 context.Context, arg1 *pb.NewClientKeyRequest, arg2 ...grpc.CallOption) (*pb.NewClientKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewClientKey", varargs...)
	ret0, _ := ret[0].(*pb.NewClientKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientKey indicates an expected call of NewClientKey
func (mr *MockC2ClientMockRecorder) NewClientKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientKey", reflect.TypeOf((*MockC2Client)(nil).NewClientKey), varargs...)
}

// NewTopic mocks base method
func (m *MockC2Client) NewTopic(arg0 context.Context, arg1 *pb.NewTopicRequest, arg2 ...grpc.CallOption) (*pb.NewTopicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewTopic", varargs...)
	ret0, _ := ret[0].(*pb.NewTopicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTopic indicates an expected call of NewTopic
func (mr *MockC2ClientMockRecorder) NewTopic(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTopic", reflect.TypeOf((*MockC2Client)(nil).NewTopic), varargs...)
}

// NewTopicClient mocks base method
func (m *MockC2Client) NewTopicClient(arg0 context.Context, arg1 *pb.NewTopicClientRequest, arg2 ...grpc.CallOption) (*pb.NewTopicClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewTopicClient", varargs...)
	ret0, _ := ret[0].(*pb.NewTopicClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTopicClient indicates an expected call of NewTopicClient
func (mr *MockC2ClientMockRecorder) NewTopicClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTopicClient", reflect.TypeOf((*MockC2Client)(nil).NewTopicClient), varargs...)
}

// ProtectMessage mocks base method
func (m *MockC2Client) ProtectMessage(arg0 context.Context, arg1 *pb.ProtectMessageRequest, arg2 ...grpc.CallOption) (*pb.ProtectMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectMessage", varargs...)
	ret0, _ := ret[0].(*pb.ProtectMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectMessage indicates an expected call of ProtectMessage
func (mr *MockC2ClientMockRecorder) ProtectMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectMessage", reflect.TypeOf((*MockC2Client)(nil).ProtectMessage), varargs...)
}

// RemoveClient mocks base method
func (m *MockC2Client) RemoveClient(arg0 context.Context, arg1 *pb.RemoveClientRequest, arg2 ...grpc.CallOption) (*pb.RemoveClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveClient", varargs...)
	ret0, _ := ret[0].(*pb.RemoveClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveClient indicates an expected call of RemoveClient
func (mr *MockC2ClientMockRecorder) RemoveClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockC2Client)(nil).RemoveClient), varargs...)
}

// RemoveClientPubKey mocks base method
func (m *MockC2Client) RemoveClientPubKey(arg0 context.Context, arg1 *pb.RemoveClientPubKeyRequest, arg2 ...grpc.CallOption) (*pb.RemoveClientPubKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveClientPubKey", varargs...)
	ret0, _ := ret[0].(*pb.RemoveClientPubKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveClientPubKey indicates an expected call of RemoveClientPubKey
func (mr *MockC2ClientMockRecorder) RemoveClientPubKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientPubKey", reflect.TypeOf((*MockC2Client)(nil).RemoveClientPubKey), varargs...)
}

// RemoveTopic mocks base method
func (m *MockC2Client) RemoveTopic(arg0 context.Context, arg1 *pb.RemoveTopicRequest, arg2 ...grpc.CallOption) (*pb.RemoveTopicResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTopic", varargs...)
	ret0, _ := ret[0].(*pb.RemoveTopicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTopic indicates an expected call of RemoveTopic
func (mr *MockC2ClientMockRecorder) RemoveTopic(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTopic", reflect.TypeOf((*MockC2Client)(nil).RemoveTopic), varargs...)
}

// RemoveTopicClient mocks base method
func (m *MockC2Client) RemoveTopicClient(arg0 context.Context, arg1 *pb.RemoveTopicClientRequest, arg2 ...grpc.CallOption) (*pb.RemoveTopicClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTopicClient", varargs...)
	ret0, _ := ret[0].(*pb.RemoveTopicClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTopicClient indicates an expected call of RemoveTopicClient
func (mr *MockC2ClientMockRecorder) RemoveTopicClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTopicClient", reflect.TypeOf((*MockC2Client)(nil).RemoveTopicClient), varargs...)
}

// ResetClient mocks base method
func (m *MockC2Client) ResetClient(arg0 context.Context, arg1 *pb.ResetClientRequest, arg2 ...grpc.CallOption) (*pb.ResetClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetClient", varargs...)
	ret0, _ := ret[0].(*pb.ResetClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetClient indicates an expected call of ResetClient
func (mr *MockC2ClientMockRecorder) ResetClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetClient", reflect.TypeOf((*MockC2Client)(nil).ResetClient), varargs...)
}

// ResetClientPubKeys mocks base method
func (m *MockC2Client) ResetClientPubKeys(arg0 context.Context, arg1 *pb.ResetClientPubKeysRequest, arg2 ...grpc.CallOption) (*pb.ResetClientPubKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetClientPubKeys", varargs...)
	ret0, _ := ret[0].(*pb.ResetClientPubKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetClientPubKeys indicates an expected call of ResetClientPubKeys
func (mr *MockC2ClientMockRecorder) ResetClientPubKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetClientPubKeys", reflect.TypeOf((*MockC2Client)(nil).ResetClientPubKeys), varargs...)
}

// SendClientPubKey mocks base method
func (m *MockC2Client) SendClientPubKey(arg0 context.Context, arg1 *pb.SendClientPubKeyRequest, arg2 ...grpc.CallOption) (*pb.SendClientPubKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendClientPubKey", varargs...)
	ret0, _ := ret[0].(*pb.SendClientPubKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendClientPubKey indicates an expected call of SendClientPubKey
func (mr *MockC2ClientMockRecorder) SendClientPubKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendClientPubKey", reflect.TypeOf((*MockC2Client)(nil).SendClientPubKey), varargs...)
}

// SubscribeToEventStream mocks base method
func (m *MockC2Client) SubscribeToEventStream(arg0 context.Context, arg1 *pb.SubscribeToEventStreamRequest, arg2 ...grpc.CallOption) (pb.C2_SubscribeToEventStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToEventStream", varargs...)
	ret0, _ := ret[0].(pb.C2_SubscribeToEventStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToEventStream indicates an expected call of SubscribeToEventStream
func (mr *MockC2ClientMockRecorder) SubscribeToEventStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEventStream", reflect.TypeOf((*MockC2Client)(nil).SubscribeToEventStream), varargs...)
}

// UnlinkClient mocks base method
func (m *MockC2Client) UnlinkClient(arg0 context.Context, arg1 *pb.UnlinkClientRequest, arg2 ...grpc.CallOption) (*pb.UnlinkClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlinkClient", varargs...)
	ret0, _ := ret[0].(*pb.UnlinkClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlinkClient indicates an expected call of UnlinkClient
func (mr *MockC2ClientMockRecorder) UnlinkClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkClient", reflect.TypeOf((*MockC2Client)(nil).UnlinkClient), varargs...)
}

// UnprotectMessage mocks base method
func (m *MockC2Client) UnprotectMessage(arg0 context.Context, arg1 *pb.UnprotectMessageRequest, arg2 ...grpc.CallOption) (*pb.UnprotectMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectMessage", varargs...)
	ret0, _ := ret[0].(*pb.UnprotectMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectMessage indicates an expected call of UnprotectMessage
func (mr *MockC2ClientMockRecorder) UnprotectMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectMessage", reflect.TypeOf((*MockC2Client)(nil).UnprotectMessage), varargs...)
}
