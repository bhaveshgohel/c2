// Copyright 2020 Teserakt AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/c2/internal/crypto (interfaces: E4Key)

// Package crypto is a generated GoMock package.
package crypto

import (
	gomock "github.com/golang/mock/gomock"
	commands "github.com/teserakt-io/c2/internal/commands"
	reflect "reflect"
)

// MockE4Key is a mock of E4Key interface
type MockE4Key struct {
	ctrl     *gomock.Controller
	recorder *MockE4KeyMockRecorder
}

// MockE4KeyMockRecorder is the mock recorder for MockE4Key
type MockE4KeyMockRecorder struct {
	mock *MockE4Key
}

// NewMockE4Key creates a new mock instance
func NewMockE4Key(ctrl *gomock.Controller) *MockE4Key {
	mock := &MockE4Key{ctrl: ctrl}
	mock.recorder = &MockE4KeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockE4Key) EXPECT() *MockE4KeyMockRecorder {
	return m.recorder
}

// IsPubKeyMode mocks base method
func (m *MockE4Key) IsPubKeyMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPubKeyMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPubKeyMode indicates an expected call of IsPubKeyMode
func (mr *MockE4KeyMockRecorder) IsPubKeyMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPubKeyMode", reflect.TypeOf((*MockE4Key)(nil).IsPubKeyMode))
}

// NewC2KeyRotationTx mocks base method
func (m *MockE4Key) NewC2KeyRotationTx() (C2KeyRotationTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewC2KeyRotationTx")
	ret0, _ := ret[0].(C2KeyRotationTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewC2KeyRotationTx indicates an expected call of NewC2KeyRotationTx
func (mr *MockE4KeyMockRecorder) NewC2KeyRotationTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewC2KeyRotationTx", reflect.TypeOf((*MockE4Key)(nil).NewC2KeyRotationTx))
}

// ProtectCommand mocks base method
func (m *MockE4Key) ProtectCommand(arg0 commands.Command, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectCommand", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectCommand indicates an expected call of ProtectCommand
func (mr *MockE4KeyMockRecorder) ProtectCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectCommand", reflect.TypeOf((*MockE4Key)(nil).ProtectCommand), arg0, arg1)
}

// RandomKey mocks base method
func (m *MockE4Key) RandomKey() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RandomKey indicates an expected call of RandomKey
func (mr *MockE4KeyMockRecorder) RandomKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomKey", reflect.TypeOf((*MockE4Key)(nil).RandomKey))
}

// ValidateKey mocks base method
func (m *MockE4Key) ValidateKey(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateKey indicates an expected call of ValidateKey
func (mr *MockE4KeyMockRecorder) ValidateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateKey", reflect.TypeOf((*MockE4Key)(nil).ValidateKey), arg0)
}
