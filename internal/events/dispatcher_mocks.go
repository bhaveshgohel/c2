// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/c2/internal/events (interfaces: Dispatcher)

// Package events is a generated GoMock package.
package events

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDispatcher is a mock of Dispatcher interface
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// AddListener mocks base method
func (m *MockDispatcher) AddListener(arg0 Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListener", arg0)
}

// AddListener indicates an expected call of AddListener
func (mr *MockDispatcherMockRecorder) AddListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockDispatcher)(nil).AddListener), arg0)
}

// Dispatch mocks base method
func (m *MockDispatcher) Dispatch(arg0 Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0)
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockDispatcherMockRecorder) Dispatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockDispatcher)(nil).Dispatch), arg0)
}

// Listeners mocks base method
func (m *MockDispatcher) Listeners() []Listener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listeners")
	ret0, _ := ret[0].([]Listener)
	return ret0
}

// Listeners indicates an expected call of Listeners
func (mr *MockDispatcherMockRecorder) Listeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listeners", reflect.TypeOf((*MockDispatcher)(nil).Listeners))
}

// RemoveListener mocks base method
func (m *MockDispatcher) RemoveListener(arg0 Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveListener", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveListener indicates an expected call of RemoveListener
func (mr *MockDispatcherMockRecorder) RemoveListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockDispatcher)(nil).RemoveListener), arg0)
}
