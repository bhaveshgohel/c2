// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2/internal/models (interfaces: Database)

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Connection mocks base method
func (m *MockDatabase) Connection() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Connection indicates an expected call of Connection
func (mr *MockDatabaseMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockDatabase)(nil).Connection))
}

// CountClients mocks base method
func (m *MockDatabase) CountClients() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClients")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClients indicates an expected call of CountClients
func (mr *MockDatabaseMockRecorder) CountClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClients", reflect.TypeOf((*MockDatabase)(nil).CountClients))
}

// CountClientsForTopic mocks base method
func (m *MockDatabase) CountClientsForTopic(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClientsForTopic", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClientsForTopic indicates an expected call of CountClientsForTopic
func (mr *MockDatabaseMockRecorder) CountClientsForTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClientsForTopic", reflect.TypeOf((*MockDatabase)(nil).CountClientsForTopic), arg0)
}

// CountTopicKeys mocks base method
func (m *MockDatabase) CountTopicKeys() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTopicKeys")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTopicKeys indicates an expected call of CountTopicKeys
func (mr *MockDatabaseMockRecorder) CountTopicKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTopicKeys", reflect.TypeOf((*MockDatabase)(nil).CountTopicKeys))
}

// CountTopicsForClientByID mocks base method
func (m *MockDatabase) CountTopicsForClientByID(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTopicsForClientByID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTopicsForClientByID indicates an expected call of CountTopicsForClientByID
func (mr *MockDatabaseMockRecorder) CountTopicsForClientByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTopicsForClientByID", reflect.TypeOf((*MockDatabase)(nil).CountTopicsForClientByID), arg0)
}

// CountTopicsForClientByName mocks base method
func (m *MockDatabase) CountTopicsForClientByName(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTopicsForClientByName", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTopicsForClientByName indicates an expected call of CountTopicsForClientByName
func (mr *MockDatabaseMockRecorder) CountTopicsForClientByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTopicsForClientByName", reflect.TypeOf((*MockDatabase)(nil).CountTopicsForClientByName), arg0)
}

// DeleteClientByID mocks base method
func (m *MockDatabase) DeleteClientByID(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientByID indicates an expected call of DeleteClientByID
func (mr *MockDatabaseMockRecorder) DeleteClientByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientByID", reflect.TypeOf((*MockDatabase)(nil).DeleteClientByID), arg0)
}

// DeleteClientByName mocks base method
func (m *MockDatabase) DeleteClientByName(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientByName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientByName indicates an expected call of DeleteClientByName
func (mr *MockDatabaseMockRecorder) DeleteClientByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientByName", reflect.TypeOf((*MockDatabase)(nil).DeleteClientByName), arg0)
}

// DeleteTopicKey mocks base method
func (m *MockDatabase) DeleteTopicKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicKey indicates an expected call of DeleteTopicKey
func (mr *MockDatabaseMockRecorder) DeleteTopicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicKey", reflect.TypeOf((*MockDatabase)(nil).DeleteTopicKey), arg0)
}

// GetAllClients mocks base method
func (m *MockDatabase) GetAllClients() ([]Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClients")
	ret0, _ := ret[0].([]Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClients indicates an expected call of GetAllClients
func (mr *MockDatabaseMockRecorder) GetAllClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClients", reflect.TypeOf((*MockDatabase)(nil).GetAllClients))
}

// GetAllTopics mocks base method
func (m *MockDatabase) GetAllTopics() ([]TopicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTopics")
	ret0, _ := ret[0].([]TopicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTopics indicates an expected call of GetAllTopics
func (mr *MockDatabaseMockRecorder) GetAllTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTopics", reflect.TypeOf((*MockDatabase)(nil).GetAllTopics))
}

// GetClientByID mocks base method
func (m *MockDatabase) GetClientByID(arg0 []byte) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByID", arg0)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByID indicates an expected call of GetClientByID
func (mr *MockDatabaseMockRecorder) GetClientByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByID", reflect.TypeOf((*MockDatabase)(nil).GetClientByID), arg0)
}

// GetClientByName mocks base method
func (m *MockDatabase) GetClientByName(arg0 string) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByName", arg0)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByName indicates an expected call of GetClientByName
func (mr *MockDatabaseMockRecorder) GetClientByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByName", reflect.TypeOf((*MockDatabase)(nil).GetClientByName), arg0)
}

// GetClientsForTopic mocks base method
func (m *MockDatabase) GetClientsForTopic(arg0 string, arg1, arg2 int) ([]Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsForTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsForTopic indicates an expected call of GetClientsForTopic
func (mr *MockDatabaseMockRecorder) GetClientsForTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsForTopic", reflect.TypeOf((*MockDatabase)(nil).GetClientsForTopic), arg0, arg1, arg2)
}

// GetClientsRange mocks base method
func (m *MockDatabase) GetClientsRange(arg0, arg1 int) ([]Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsRange", arg0, arg1)
	ret0, _ := ret[0].([]Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsRange indicates an expected call of GetClientsRange
func (mr *MockDatabaseMockRecorder) GetClientsRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsRange", reflect.TypeOf((*MockDatabase)(nil).GetClientsRange), arg0, arg1)
}

// GetTopicKey mocks base method
func (m *MockDatabase) GetTopicKey(arg0 string) (TopicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicKey", arg0)
	ret0, _ := ret[0].(TopicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicKey indicates an expected call of GetTopicKey
func (mr *MockDatabaseMockRecorder) GetTopicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicKey", reflect.TypeOf((*MockDatabase)(nil).GetTopicKey), arg0)
}

// GetTopicsForClientByID mocks base method
func (m *MockDatabase) GetTopicsForClientByID(arg0 []byte, arg1, arg2 int) ([]TopicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsForClientByID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]TopicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsForClientByID indicates an expected call of GetTopicsForClientByID
func (mr *MockDatabaseMockRecorder) GetTopicsForClientByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsForClientByID", reflect.TypeOf((*MockDatabase)(nil).GetTopicsForClientByID), arg0, arg1, arg2)
}

// GetTopicsForClientByName mocks base method
func (m *MockDatabase) GetTopicsForClientByName(arg0 string, arg1, arg2 int) ([]TopicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsForClientByName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]TopicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsForClientByName indicates an expected call of GetTopicsForClientByName
func (mr *MockDatabaseMockRecorder) GetTopicsForClientByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsForClientByName", reflect.TypeOf((*MockDatabase)(nil).GetTopicsForClientByName), arg0, arg1, arg2)
}

// GetTopicsRange mocks base method
func (m *MockDatabase) GetTopicsRange(arg0, arg1 int) ([]TopicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsRange", arg0, arg1)
	ret0, _ := ret[0].([]TopicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsRange indicates an expected call of GetTopicsRange
func (mr *MockDatabaseMockRecorder) GetTopicsRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsRange", reflect.TypeOf((*MockDatabase)(nil).GetTopicsRange), arg0, arg1)
}

// InsertClient mocks base method
func (m *MockDatabase) InsertClient(arg0 string, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClient", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertClient indicates an expected call of InsertClient
func (mr *MockDatabaseMockRecorder) InsertClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClient", reflect.TypeOf((*MockDatabase)(nil).InsertClient), arg0, arg1, arg2)
}

// InsertTopicKey mocks base method
func (m *MockDatabase) InsertTopicKey(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTopicKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTopicKey indicates an expected call of InsertTopicKey
func (mr *MockDatabaseMockRecorder) InsertTopicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTopicKey", reflect.TypeOf((*MockDatabase)(nil).InsertTopicKey), arg0, arg1)
}

// LinkClientTopic mocks base method
func (m *MockDatabase) LinkClientTopic(arg0 Client, arg1 TopicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkClientTopic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkClientTopic indicates an expected call of LinkClientTopic
func (mr *MockDatabaseMockRecorder) LinkClientTopic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkClientTopic", reflect.TypeOf((*MockDatabase)(nil).LinkClientTopic), arg0, arg1)
}

// Migrate mocks base method
func (m *MockDatabase) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockDatabaseMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatabase)(nil).Migrate))
}

// UnlinkClientTopic mocks base method
func (m *MockDatabase) UnlinkClientTopic(arg0 Client, arg1 TopicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkClientTopic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkClientTopic indicates an expected call of UnlinkClientTopic
func (mr *MockDatabaseMockRecorder) UnlinkClientTopic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkClientTopic", reflect.TypeOf((*MockDatabase)(nil).UnlinkClientTopic), arg0, arg1)
}
