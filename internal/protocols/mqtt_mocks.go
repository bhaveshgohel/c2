// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2/internal/protocols (interfaces: MQTTClient)

// Package protocols is a generated GoMock package.
package protocols

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMQTTClient is a mock of MQTTClient interface
type MockMQTTClient struct {
	ctrl     *gomock.Controller
	recorder *MockMQTTClientMockRecorder
}

// MockMQTTClientMockRecorder is the mock recorder for MockMQTTClient
type MockMQTTClientMockRecorder struct {
	mock *MockMQTTClient
}

// NewMockMQTTClient creates a new mock instance
func NewMockMQTTClient(ctrl *gomock.Controller) *MockMQTTClient {
	mock := &MockMQTTClient{ctrl: ctrl}
	mock.recorder = &MockMQTTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMQTTClient) EXPECT() *MockMQTTClientMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockMQTTClient) Publish(arg0 []byte, arg1 string, arg2 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockMQTTClientMockRecorder) Publish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMQTTClient)(nil).Publish), arg0, arg1, arg2)
}

// SubscribeToTopic mocks base method
func (m *MockMQTTClient) SubscribeToTopic(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopic", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTopic indicates an expected call of SubscribeToTopic
func (mr *MockMQTTClientMockRecorder) SubscribeToTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopic", reflect.TypeOf((*MockMQTTClient)(nil).SubscribeToTopic), arg0)
}

// SubscribeToTopics mocks base method
func (m *MockMQTTClient) SubscribeToTopics(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTopics indicates an expected call of SubscribeToTopics
func (mr *MockMQTTClientMockRecorder) SubscribeToTopics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopics", reflect.TypeOf((*MockMQTTClient)(nil).SubscribeToTopics), arg0)
}

// UnsubscribeFromTopic mocks base method
func (m *MockMQTTClient) UnsubscribeFromTopic(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromTopic", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeFromTopic indicates an expected call of UnsubscribeFromTopic
func (mr *MockMQTTClientMockRecorder) UnsubscribeFromTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromTopic", reflect.TypeOf((*MockMQTTClient)(nil).UnsubscribeFromTopic), arg0)
}
