// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2/internal/protocols (interfaces: MQTTClient,MQTTMessage,MQTTToken)

// Package protocols is a generated GoMock package.
package protocols

import (
	paho_mqtt_golang "github.com/eclipse/paho.mqtt.golang"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockMQTTClient is a mock of MQTTClient interface
type MockMQTTClient struct {
	ctrl     *gomock.Controller
	recorder *MockMQTTClientMockRecorder
}

// MockMQTTClientMockRecorder is the mock recorder for MockMQTTClient
type MockMQTTClientMockRecorder struct {
	mock *MockMQTTClient
}

// NewMockMQTTClient creates a new mock instance
func NewMockMQTTClient(ctrl *gomock.Controller) *MockMQTTClient {
	mock := &MockMQTTClient{ctrl: ctrl}
	mock.recorder = &MockMQTTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMQTTClient) EXPECT() *MockMQTTClientMockRecorder {
	return m.recorder
}

// AddRoute mocks base method
func (m *MockMQTTClient) AddRoute(arg0 string, arg1 paho_mqtt_golang.MessageHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRoute", arg0, arg1)
}

// AddRoute indicates an expected call of AddRoute
func (mr *MockMQTTClientMockRecorder) AddRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockMQTTClient)(nil).AddRoute), arg0, arg1)
}

// Connect mocks base method
func (m *MockMQTTClient) Connect() paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockMQTTClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMQTTClient)(nil).Connect))
}

// Disconnect mocks base method
func (m *MockMQTTClient) Disconnect(arg0 uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect", arg0)
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockMQTTClientMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMQTTClient)(nil).Disconnect), arg0)
}

// IsConnected mocks base method
func (m *MockMQTTClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockMQTTClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockMQTTClient)(nil).IsConnected))
}

// IsConnectionOpen mocks base method
func (m *MockMQTTClient) IsConnectionOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectionOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectionOpen indicates an expected call of IsConnectionOpen
func (mr *MockMQTTClientMockRecorder) IsConnectionOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectionOpen", reflect.TypeOf((*MockMQTTClient)(nil).IsConnectionOpen))
}

// OptionsReader mocks base method
func (m *MockMQTTClient) OptionsReader() paho_mqtt_golang.ClientOptionsReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsReader")
	ret0, _ := ret[0].(paho_mqtt_golang.ClientOptionsReader)
	return ret0
}

// OptionsReader indicates an expected call of OptionsReader
func (mr *MockMQTTClientMockRecorder) OptionsReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsReader", reflect.TypeOf((*MockMQTTClient)(nil).OptionsReader))
}

// Publish mocks base method
func (m *MockMQTTClient) Publish(arg0 string, arg1 byte, arg2 bool, arg3 interface{}) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockMQTTClientMockRecorder) Publish(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMQTTClient)(nil).Publish), arg0, arg1, arg2, arg3)
}

// Subscribe mocks base method
func (m *MockMQTTClient) Subscribe(arg0 string, arg1 byte, arg2 paho_mqtt_golang.MessageHandler) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMQTTClientMockRecorder) Subscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMQTTClient)(nil).Subscribe), arg0, arg1, arg2)
}

// SubscribeMultiple mocks base method
func (m *MockMQTTClient) SubscribeMultiple(arg0 map[string]byte, arg1 paho_mqtt_golang.MessageHandler) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeMultiple", arg0, arg1)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// SubscribeMultiple indicates an expected call of SubscribeMultiple
func (mr *MockMQTTClientMockRecorder) SubscribeMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMultiple", reflect.TypeOf((*MockMQTTClient)(nil).SubscribeMultiple), arg0, arg1)
}

// Unsubscribe mocks base method
func (m *MockMQTTClient) Unsubscribe(arg0 ...string) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockMQTTClientMockRecorder) Unsubscribe(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockMQTTClient)(nil).Unsubscribe), arg0...)
}

// MockMQTTMessage is a mock of MQTTMessage interface
type MockMQTTMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMQTTMessageMockRecorder
}

// MockMQTTMessageMockRecorder is the mock recorder for MockMQTTMessage
type MockMQTTMessageMockRecorder struct {
	mock *MockMQTTMessage
}

// NewMockMQTTMessage creates a new mock instance
func NewMockMQTTMessage(ctrl *gomock.Controller) *MockMQTTMessage {
	mock := &MockMQTTMessage{ctrl: ctrl}
	mock.recorder = &MockMQTTMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMQTTMessage) EXPECT() *MockMQTTMessageMockRecorder {
	return m.recorder
}

// Ack mocks base method
func (m *MockMQTTMessage) Ack() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ack")
}

// Ack indicates an expected call of Ack
func (mr *MockMQTTMessageMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMQTTMessage)(nil).Ack))
}

// Duplicate mocks base method
func (m *MockMQTTMessage) Duplicate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duplicate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Duplicate indicates an expected call of Duplicate
func (mr *MockMQTTMessageMockRecorder) Duplicate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockMQTTMessage)(nil).Duplicate))
}

// MessageID mocks base method
func (m *MockMQTTMessage) MessageID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// MessageID indicates an expected call of MessageID
func (mr *MockMQTTMessageMockRecorder) MessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageID", reflect.TypeOf((*MockMQTTMessage)(nil).MessageID))
}

// Payload mocks base method
func (m *MockMQTTMessage) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockMQTTMessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMQTTMessage)(nil).Payload))
}

// Qos mocks base method
func (m *MockMQTTMessage) Qos() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qos")
	ret0, _ := ret[0].(byte)
	return ret0
}

// Qos indicates an expected call of Qos
func (mr *MockMQTTMessageMockRecorder) Qos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockMQTTMessage)(nil).Qos))
}

// Retained mocks base method
func (m *MockMQTTMessage) Retained() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retained")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Retained indicates an expected call of Retained
func (mr *MockMQTTMessageMockRecorder) Retained() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retained", reflect.TypeOf((*MockMQTTMessage)(nil).Retained))
}

// Topic mocks base method
func (m *MockMQTTMessage) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockMQTTMessageMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockMQTTMessage)(nil).Topic))
}

// MockMQTTToken is a mock of MQTTToken interface
type MockMQTTToken struct {
	ctrl     *gomock.Controller
	recorder *MockMQTTTokenMockRecorder
}

// MockMQTTTokenMockRecorder is the mock recorder for MockMQTTToken
type MockMQTTTokenMockRecorder struct {
	mock *MockMQTTToken
}

// NewMockMQTTToken creates a new mock instance
func NewMockMQTTToken(ctrl *gomock.Controller) *MockMQTTToken {
	mock := &MockMQTTToken{ctrl: ctrl}
	mock.recorder = &MockMQTTTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMQTTToken) EXPECT() *MockMQTTTokenMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockMQTTToken) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockMQTTTokenMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockMQTTToken)(nil).Error))
}

// Wait mocks base method
func (m *MockMQTTToken) Wait() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockMQTTTokenMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockMQTTToken)(nil).Wait))
}

// WaitTimeout mocks base method
func (m *MockMQTTToken) WaitTimeout(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitTimeout", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitTimeout indicates an expected call of WaitTimeout
func (mr *MockMQTTTokenMockRecorder) WaitTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTimeout", reflect.TypeOf((*MockMQTTToken)(nil).WaitTimeout), arg0)
}
