// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2/pkg/pb (interfaces: C2_SubscribeToEventStreamClient)

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockC2_SubscribeToEventStreamClient is a mock of C2_SubscribeToEventStreamClient interface
type MockC2_SubscribeToEventStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockC2_SubscribeToEventStreamClientMockRecorder
}

// MockC2_SubscribeToEventStreamClientMockRecorder is the mock recorder for MockC2_SubscribeToEventStreamClient
type MockC2_SubscribeToEventStreamClientMockRecorder struct {
	mock *MockC2_SubscribeToEventStreamClient
}

// NewMockC2_SubscribeToEventStreamClient creates a new mock instance
func NewMockC2_SubscribeToEventStreamClient(ctrl *gomock.Controller) *MockC2_SubscribeToEventStreamClient {
	mock := &MockC2_SubscribeToEventStreamClient{ctrl: ctrl}
	mock.recorder = &MockC2_SubscribeToEventStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockC2_SubscribeToEventStreamClient) EXPECT() *MockC2_SubscribeToEventStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockC2_SubscribeToEventStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockC2_SubscribeToEventStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).Context))
}

// Header mocks base method
func (m *MockC2_SubscribeToEventStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).Header))
}

// Recv mocks base method
func (m *MockC2_SubscribeToEventStreamClient) Recv() (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockC2_SubscribeToEventStreamClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockC2_SubscribeToEventStreamClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockC2_SubscribeToEventStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockC2_SubscribeToEventStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockC2_SubscribeToEventStreamClient)(nil).Trailer))
}
